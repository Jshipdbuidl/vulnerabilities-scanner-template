name: CI Backend
on:
  [workflow_dispatch, push]

concurrency: ci-backend-${{ github.ref }}

jobs:

  gitleaks:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: run gitleaks docker
        run: |
          docker run -v ${PWD}:/path zricethezav/gitleaks:latest detect --source="/path/" -v -l debug --no-git
  
  # TruffleHog:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: TruffleHog
  #       run: |
  #         docker run -v ${PWD}:/truffle trufflesecurity/trufflehog:latest filesystem --directory="/truffle/"


  # unit-tests-and-coverage:
  #   name: Tests and coverage
  #   runs-on: ubuntu-latest
  #   needs: [gitleaks]
  #   env:
  #     FLASK_ENV: development
  #   steps:
  #     - name: checkout git repository
  #       uses: actions/checkout@v3

  #     - name: Setup Python 3.8
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.8"

  #     - name: Install dependencies
  #       run: pip install -r requirements.txt

      # - name: Execute unit tests and generate coverage file
      #   run: |
      #     bash ./scripts/run_test.sh


      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
        with:
          pytest-coverage: pytest-coverage.txt
        
  lint:
    name: Lint
    runs-on: ubuntu-latest
    #env:
    needs: [gitleaks]
    #  FLASK_ENV: development
    steps:
      - name: checkout git repository
        uses: actions/checkout@v3

      - name: Setup Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint
        run: pylint ./lambda/*.py

  security-checks:
    runs-on: ubuntu-latest
    needs: [gitleaks]
    name: Pycharm-security check
    steps:
      - name: checkout git repository
        uses: actions/checkout@v3

      - name: Run PyCharm Security
        uses: tonybaloney/pycharm-security@master
        with:
          fail_on_warnings: "yes"

  docker-grype-project:
    name: Grype (Anchore) Project Scan
    needs: [gitleaks]
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Scan current project with Grype (Anchore)
        id: scan-project
        uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: true
      Advanced Security in Github must be enabled for this repository to upload report.
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan-project.outputs.sarif }}

  docker-build:
    name: Build Docker image
    outputs:
      full_docker_image_tag: ${{ steps.build_image.outputs.full_docker_image_tag }}
      image_tag: ${{ steps.build_image.outputs.image_tag }}
    runs-on: ubuntu-latest
    needs: [security-checks, lint, docker-grype-project]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Add SHORT_SHA and BRANCH_TAG env variables
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "BRANCH_TAG=`echo ${GITHUB_REF##*/}`" >> $GITHUB_ENV

      - name: Set IMAGE_TAG env variable
        run: |
          echo "IMAGE_TAG=`echo ${BRANCH_TAG}-${SHORT_SHA}`" >> $GITHUB_ENV

      - name: Build and tag image
        id: build_image
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
          ECR_REPOSITORY: ${{ github.repository }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo REGISTRY: $REGISTRY
          echo ECR_REPOSITORY: $ECR_REPOSITORY
          echo IMAGE_TAG: $IMAGE_TAG
          echo "Building and tagging $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ..."
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          mkdir -p /tmp
          docker save "$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > /tmp/docker-image.tar
          echo "full_docker_image_tag=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1